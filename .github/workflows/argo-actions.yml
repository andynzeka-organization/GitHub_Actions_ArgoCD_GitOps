name: GitOps Pipeline with ArgoCD

on: 
  push:
    branches: 
      - main
    paths-ignore:
      - 'manifest/**'

env: 
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
  ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      commit_id: ${{ steps.short_commit_id.outputs.commit_id }}

    steps: 
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with: 
          node-version: '14'

      - name: Install NodeJS dependencies
        run: npm install

      - name: Generate short commit ID
        id: short_commit_id
        run: echo "commit_id=${GITHUB_SHA::6}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ steps.short_commit_id.outputs.commit_id }} .

      - name: Scan Docker Image with Trivy
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ steps.short_commit_id.outputs.commit_id }}

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ steps.short_commit_id.outputs.commit_id }}

  deploy:
    needs: build
    runs-on: self-hosted
    steps: 
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Install ArgoCD CLI
        shell: bash
        run: |
          curl -ksSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
          echo "✅ ArgoCD CLI installed successfully."
      
      # - name: Install Terraform
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y wget unzip
      #     wget https://releases.hashicorp.com/terraform/1.5.6/terraform_1.5.6_linux_amd64.zip
      #     unzip terraform_1.5.6_linux_amd64.zip
      #     sudo mv terraform /usr/local/bin/
      #     terraform version

      # - name: Get ArgoCD ALB hostname from Terraform output
      #   id: terraform_output
      #   run: |
      #     cd terraform/argocd
      #     hostname=$(terraform output -raw argocd_ingress_hostname)
      #     echo "alb_hostname=$hostname" >> $GITHUB_OUTPUT
      #     cd -

      - name: ArgoCD login
        shell: bash
        run: |
          argocd login k8s-argocd-fcd9021302-1542969392.us-east-1.elb.amazonaws.com/argocd \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure \
            --grpc-web

      - name: Update deployment.yaml with new Docker tag
        run: |
          git config user.name "${{ secrets.GIT_USERNAME }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git fetch origin
          git checkout main
          git pull origin main

          # Replace old tag with new one in deployment.yaml
          sed -i "s|${{ secrets.DOCKERHUB_USERNAME }}/my-app:.*|${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ needs.build.outputs.commit_id }}|g" manifest/deployment.yaml

          echo "✅ Updated deployment.yaml with image tag:"
          grep "image:" manifest/deployment.yaml

      - name: Commit and Push Updated deployment.yaml
        run: |
          git remote set-url origin https://$GIT_USERNAME:$PERSONAL_ACCESS_TOKEN@github.com/${{ github.repository }}.git
          git add manifest/deployment.yaml

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update image to my-app:${{ needs.build.outputs.commit_id }}"
            git push origin main
          fi

      - name: Sync ArgoCD App
        run: argocd app sync my-app
